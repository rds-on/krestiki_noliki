import pygame
import sys


def check_win(mas, sign):
    zerous = 0
    for row in mas:
        zerous += row.count(0)
        if row.count(sign) == 3:
            return 'Win '+ sign
    for col in range(3):
        if mas[0][col] == sign and mas[1][col] == sign and mas[2][col] == sign:
            return 'Win '+ sign
    if mas[0][0] == sign and mas[1][1] == sign and mas[2][2] == sign:
        return 'Win '+ sign
    if mas[0][2] == sign and mas[1][1] == sign and mas[2][0] == sign:
        return 'Win '+ sign
    if zerous == 0:
        return 'Draw'
    return False



pygame.init()
size_block = 100
margin = 15
width =  size_block * 3 + margin * 4
heigth = width + 200

size_window = (width, heigth)
screen = pygame.display.set_mode(size_window)

black = (0, 0, 0)
red = (255, 100, 100)
green = (100, 255, 100)
white = (255, 255, 255)
yellow = (255,186,0)
mas = [[0] * 3 for i in range(3)]
query = 0
game_over = False

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.MOUSEBUTTONDOWN and not game_over:
            x_mouse, y_mouse = pygame.mouse.get_pos()
            if y_mouse <= 360:
                col = x_mouse // (size_block + margin)
                row = y_mouse // (size_block + margin)
                if mas[row][col] == 0:
                    if query % 2 == 0:
                        mas[row][col] = 'x'
                    else:
                        mas[row][col] = 'o'
                    query += 1
            else:
                if 30 <= x_mouse <= 330 and 400 <= y_mouse <= 500:
                    game_over =False
                    mas = [[0] * 3 for i in range(3)]
                    query = 0
                    screen.fill(black)

        elif event.type == pygame.MOUSEBUTTONDOWN and game_over:
            x_mouse, y_mouse = pygame.mouse.get_pos()
            if 30 <= x_mouse <= 330 and 400 <= y_mouse <= 500:
                game_over =False
                mas = [[0] * 3 for i in range(3)]
                query = 0
                screen.fill(black)

    if not game_over:
        pygame.draw.rect(screen, yellow, (30, 400, size_block+200, size_block))
        my_font = pygame.font.SysFont('Comic Sans MS', 30)
        text_surface = my_font.render('RESTART', False, (0, 0, 0))
        screen.blit(text_surface, (110,425))
        for row in range(3):
            for col in range(3):
                if mas[row][col] == 'x':
                    color = red
                elif mas[row][col] == 'o':
                    color = green
                else:
                    color = white
                x = col * size_block + (col + 1) * margin
                y = row * size_block + (row + 1) * margin
                pygame.draw.rect(screen, color, (x, y, size_block, size_block))
                if color == red:
                    pygame.draw.line(screen, white, (x + 5, y + 5), (x + size_block - 5, y + size_block - 5), 4)
                    pygame.draw.line(screen, white, (x + size_block - 5, y + 5), (x + 5, y + size_block - 5), 4)
                else:
                    pygame.draw.circle(screen, white, (x + size_block // 2, y + size_block // 2), size_block // 2 - 3, 4)


        if (query - 1) % 2 == 0:
            game_over = check_win(mas, 'x')
        else:
            game_over = check_win(mas, 'o')

        if game_over:
            pygame.draw.rect(screen, black, (0, 0, 360, width))
            font = pygame.font.SysFont('stxingkai', 80)
            text1 = font.render(game_over, True, white)
            text_rect = text1.get_rect()
            text_x = screen.get_width() / 2 - text_rect.width / 2
            text_y = screen.get_height() / 2 - text_rect.height / 2
            screen.blit(text1, [text_x, text_y])

    pygame.display.update()